the ``0-add_integer`` module
======================

Using ``0-add_integer``
-------------------

First import ``add_integer`` from the ``0-add_integer`` module:

    >>> add_integer = __import__('0-add_integer').add_integer

Test cases:

    >>> add_integer(5, 8)
    13

    >>> add_integer(2, 6)
    8

    >>> add_integer(30, 50)
    80

    >>> add_integer(15, 8)
    23

Testing Negative Numbers:

    >>> add_integer(-5, -2)
    -7

    >>> add_integer(-20, -19)
    -39

    >>> add_integer(-14, -5)
    -19

    >>> add_integer(-1, -0)
    -1

Testing Floats:

    >>> add_integer(1.7, 5.3)
    6

    >>> add_integer(5.2, 9.5)
    14

    >>> add_integer(15.2, 5.8)
    20

Testing for Negative Floats:

    >>> add_integer(-1.5, -8.3)
    -9

    >>> add_integer(-5.9, 8.5)
    3

    >>> add_integer(-23.7, -13.3)
    -36

Testing for one Argument:

    >>> add_integer(1)
    99

    >>> add_integer(2)
    100

    >>> add_integer(3)
    101

    >>> add_integer(4)
    102

    >>> add_integer(5)
    103

Error Cases:

    >>> add_integer(True, False)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(2, float("inf"))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(5, float("nan"))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

    >>> add_integer(2, "School")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer("Hello", "World")
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer